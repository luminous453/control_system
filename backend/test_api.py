#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
"""

import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000"

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API"""
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –°–∏—Å—Ç–µ–º—ã –ö–æ–Ω—Ç—Ä–æ–ª—è –î–µ—Ñ–µ–∫—Ç–æ–≤ ===")
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print(f"‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {response.status_code}")
            return
        print()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π endpoint
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint...")
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('message')}")
        else:
            print(f"‚ùå –ö–æ—Ä–Ω–µ–≤–æ–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
        print()
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")
        response = requests.get(f"{BASE_URL}/api/users/roles")
        if response.status_code == 401:
            print("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
        else:
            print(f"‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        print()
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        login_data = {
            "username": "admin@example.com",  # OAuth2PasswordRequestForm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç username
            "password": "password123"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/auth/login",
            data=login_data,
            headers={"Content-Type": "application/x-www-form-urlencoded"}
        )
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            user = token_data.get("user")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.get('full_name')}")
            print(f"   –†–æ–ª—å: {user.get('role', {}).get('name')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            headers = {"Authorization": f"Bearer {access_token}"}
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return
        print()
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
        print("5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–æ–º...")
        response = requests.get(f"{BASE_URL}/api/users/roles", headers=headers)
        if response.status_code == 200:
            roles = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–æ–ª–∏: {[role['name'] for role in roles]}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {response.status_code}")
        print()
        
        # 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        response = requests.get(f"{BASE_URL}/api/users/me", headers=headers)
        if response.status_code == 200:
            user = response.json()
            print(f"‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name')} ({user.get('email')})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
        print()
        
        # 7. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        print("7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        response = requests.get(f"{BASE_URL}/api/projects/", headers=headers)
        if response.status_code == 200:
            projects = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            for project in projects[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {project.get('name')} (–¥–µ—Ñ–µ–∫—Ç–æ–≤: {project.get('defects_count', 0)})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code}")
        print()
        
        # 8. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–µ–∫—Ç—ã
        print("8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
        response = requests.get(f"{BASE_URL}/api/defects/", headers=headers)
        if response.status_code == 200:
            defects = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {len(defects)}")
            for defect in defects[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status = defect.get('status', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                priority = {1: '–ù–∏–∑–∫–∏–π', 2: '–°—Ä–µ–¥–Ω–∏–π', 3: '–í—ã—Å–æ–∫–∏–π'}.get(defect.get('priority'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   - ID {defect.get('id')}: {defect.get('description')[:50]}... [{status}, {priority}]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤: {response.status_code}")
        print()
        
        # 9. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        print("9. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        response = requests.get(f"{BASE_URL}/api/reports/analytics", headers=headers)
        if response.status_code == 200:
            analytics = response.json()
            metrics = analytics.get('metrics', {})
            print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"   - –í—Å–µ–≥–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {metrics.get('total_defects')}")
            print(f"   - –û—Ç–∫—Ä—ã—Ç—ã—Ö: {metrics.get('open_defects')}")
            print(f"   - –ó–∞–∫—Ä—ã—Ç—ã—Ö: {metrics.get('closed_defects')}")
            print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {metrics.get('completion_rate')}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.status_code}")
        print()
        
        print("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã API –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/docs")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_api()
