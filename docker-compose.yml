version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: control_system_db
    environment:
      POSTGRES_DB: control_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - control_system_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d control_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build: ./backend
    container_name: control_system_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/control_system
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=control_system
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - control_system_network
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build: ./frontend
    container_name: control_system_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - control_system_network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: control_system_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - backend_uploads:/var/www/uploads
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - control_system_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  control_system_network:
    driver: bridge
